{"ast":null,"code":"\"use strict\";\n\nvar makeError = require('make-error');\n\nvar assign = require('object-assign');\n\nfunction ClientError(res) {\n  var props = extractErrorProps(res);\n  ClientError.super.call(this, props.message);\n  assign(this, props);\n}\n\nfunction ServerError(res) {\n  var props = extractErrorProps(res);\n  ServerError.super.call(this, props.message);\n  assign(this, props);\n}\n\nfunction extractErrorProps(res) {\n  var body = res.body;\n  var props = {\n    response: res,\n    statusCode: res.statusCode,\n    responseBody: stringifyBody(body, res)\n  }; // API/Boom style errors ({statusCode, error, message})\n\n  if (body.error && body.message) {\n    props.message = \"\".concat(body.error, \" - \").concat(body.message);\n    return props;\n  } // Query/database errors ({error: {description, other, arb, props}})\n\n\n  if (body.error && body.error.description) {\n    props.message = body.error.description;\n    props.details = body.error;\n    return props;\n  } // Other, more arbitrary errors\n\n\n  props.message = body.error || body.message || httpErrorMessage(res);\n  return props;\n}\n\nfunction httpErrorMessage(res) {\n  var statusMessage = res.statusMessage ? \" \".concat(res.statusMessage) : '';\n  return \"\".concat(res.method, \"-request to \").concat(res.url, \" resulted in HTTP \").concat(res.statusCode).concat(statusMessage);\n}\n\nfunction stringifyBody(body, res) {\n  var contentType = (res.headers['content-type'] || '').toLowerCase();\n  var isJson = contentType.indexOf('application/json') !== -1;\n  return isJson ? JSON.stringify(body, null, 2) : body;\n}\n\nmakeError(ClientError);\nmakeError(ServerError);\nexports.ClientError = ClientError;\nexports.ServerError = ServerError;","map":{"version":3,"names":["makeError","require","assign","ClientError","res","props","extractErrorProps","super","call","message","ServerError","body","response","statusCode","responseBody","stringifyBody","error","concat","description","details","httpErrorMessage","statusMessage","method","url","contentType","headers","toLowerCase","isJson","indexOf","JSON","stringify","exports"],"sources":["/home/sony/Data/FE/company-profile/node_modules/@sanity/client/lib/http/errors.js"],"sourcesContent":["\"use strict\";\n\nvar makeError = require('make-error');\n\nvar assign = require('object-assign');\n\nfunction ClientError(res) {\n  var props = extractErrorProps(res);\n  ClientError.super.call(this, props.message);\n  assign(this, props);\n}\n\nfunction ServerError(res) {\n  var props = extractErrorProps(res);\n  ServerError.super.call(this, props.message);\n  assign(this, props);\n}\n\nfunction extractErrorProps(res) {\n  var body = res.body;\n  var props = {\n    response: res,\n    statusCode: res.statusCode,\n    responseBody: stringifyBody(body, res)\n  }; // API/Boom style errors ({statusCode, error, message})\n\n  if (body.error && body.message) {\n    props.message = \"\".concat(body.error, \" - \").concat(body.message);\n    return props;\n  } // Query/database errors ({error: {description, other, arb, props}})\n\n\n  if (body.error && body.error.description) {\n    props.message = body.error.description;\n    props.details = body.error;\n    return props;\n  } // Other, more arbitrary errors\n\n\n  props.message = body.error || body.message || httpErrorMessage(res);\n  return props;\n}\n\nfunction httpErrorMessage(res) {\n  var statusMessage = res.statusMessage ? \" \".concat(res.statusMessage) : '';\n  return \"\".concat(res.method, \"-request to \").concat(res.url, \" resulted in HTTP \").concat(res.statusCode).concat(statusMessage);\n}\n\nfunction stringifyBody(body, res) {\n  var contentType = (res.headers['content-type'] || '').toLowerCase();\n  var isJson = contentType.indexOf('application/json') !== -1;\n  return isJson ? JSON.stringify(body, null, 2) : body;\n}\n\nmakeError(ClientError);\nmakeError(ServerError);\nexports.ClientError = ClientError;\nexports.ServerError = ServerError;"],"mappings":"AAAA;;AAEA,IAAIA,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAvB;;AAEA,IAAIC,MAAM,GAAGD,OAAO,CAAC,eAAD,CAApB;;AAEA,SAASE,WAAT,CAAqBC,GAArB,EAA0B;EACxB,IAAIC,KAAK,GAAGC,iBAAiB,CAACF,GAAD,CAA7B;EACAD,WAAW,CAACI,KAAZ,CAAkBC,IAAlB,CAAuB,IAAvB,EAA6BH,KAAK,CAACI,OAAnC;EACAP,MAAM,CAAC,IAAD,EAAOG,KAAP,CAAN;AACD;;AAED,SAASK,WAAT,CAAqBN,GAArB,EAA0B;EACxB,IAAIC,KAAK,GAAGC,iBAAiB,CAACF,GAAD,CAA7B;EACAM,WAAW,CAACH,KAAZ,CAAkBC,IAAlB,CAAuB,IAAvB,EAA6BH,KAAK,CAACI,OAAnC;EACAP,MAAM,CAAC,IAAD,EAAOG,KAAP,CAAN;AACD;;AAED,SAASC,iBAAT,CAA2BF,GAA3B,EAAgC;EAC9B,IAAIO,IAAI,GAAGP,GAAG,CAACO,IAAf;EACA,IAAIN,KAAK,GAAG;IACVO,QAAQ,EAAER,GADA;IAEVS,UAAU,EAAET,GAAG,CAACS,UAFN;IAGVC,YAAY,EAAEC,aAAa,CAACJ,IAAD,EAAOP,GAAP;EAHjB,CAAZ,CAF8B,CAM3B;;EAEH,IAAIO,IAAI,CAACK,KAAL,IAAcL,IAAI,CAACF,OAAvB,EAAgC;IAC9BJ,KAAK,CAACI,OAAN,GAAgB,GAAGQ,MAAH,CAAUN,IAAI,CAACK,KAAf,EAAsB,KAAtB,EAA6BC,MAA7B,CAAoCN,IAAI,CAACF,OAAzC,CAAhB;IACA,OAAOJ,KAAP;EACD,CAX6B,CAW5B;;;EAGF,IAAIM,IAAI,CAACK,KAAL,IAAcL,IAAI,CAACK,KAAL,CAAWE,WAA7B,EAA0C;IACxCb,KAAK,CAACI,OAAN,GAAgBE,IAAI,CAACK,KAAL,CAAWE,WAA3B;IACAb,KAAK,CAACc,OAAN,GAAgBR,IAAI,CAACK,KAArB;IACA,OAAOX,KAAP;EACD,CAlB6B,CAkB5B;;;EAGFA,KAAK,CAACI,OAAN,GAAgBE,IAAI,CAACK,KAAL,IAAcL,IAAI,CAACF,OAAnB,IAA8BW,gBAAgB,CAAChB,GAAD,CAA9D;EACA,OAAOC,KAAP;AACD;;AAED,SAASe,gBAAT,CAA0BhB,GAA1B,EAA+B;EAC7B,IAAIiB,aAAa,GAAGjB,GAAG,CAACiB,aAAJ,GAAoB,IAAIJ,MAAJ,CAAWb,GAAG,CAACiB,aAAf,CAApB,GAAoD,EAAxE;EACA,OAAO,GAAGJ,MAAH,CAAUb,GAAG,CAACkB,MAAd,EAAsB,cAAtB,EAAsCL,MAAtC,CAA6Cb,GAAG,CAACmB,GAAjD,EAAsD,oBAAtD,EAA4EN,MAA5E,CAAmFb,GAAG,CAACS,UAAvF,EAAmGI,MAAnG,CAA0GI,aAA1G,CAAP;AACD;;AAED,SAASN,aAAT,CAAuBJ,IAAvB,EAA6BP,GAA7B,EAAkC;EAChC,IAAIoB,WAAW,GAAG,CAACpB,GAAG,CAACqB,OAAJ,CAAY,cAAZ,KAA+B,EAAhC,EAAoCC,WAApC,EAAlB;EACA,IAAIC,MAAM,GAAGH,WAAW,CAACI,OAAZ,CAAoB,kBAApB,MAA4C,CAAC,CAA1D;EACA,OAAOD,MAAM,GAAGE,IAAI,CAACC,SAAL,CAAenB,IAAf,EAAqB,IAArB,EAA2B,CAA3B,CAAH,GAAmCA,IAAhD;AACD;;AAEDX,SAAS,CAACG,WAAD,CAAT;AACAH,SAAS,CAACU,WAAD,CAAT;AACAqB,OAAO,CAAC5B,WAAR,GAAsBA,WAAtB;AACA4B,OAAO,CAACrB,WAAR,GAAsBA,WAAtB"},"metadata":{},"sourceType":"script"}