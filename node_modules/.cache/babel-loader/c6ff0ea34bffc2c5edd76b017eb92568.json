{"ast":null,"code":"\"use strict\";\n\nvar objectAssign = require('object-assign');\n\nvar getImageUrl = require('./getImageUrl');\n\nmodule.exports = function (h, serializerOpts) {\n  var serializeOptions = serializerOpts || {\n    useDashedStyles: false\n  }; // Low-level block serializer\n\n  function BlockSerializer(props) {\n    var node = props.node,\n        serializers = props.serializers,\n        options = props.options,\n        isInline = props.isInline,\n        children = props.children;\n    var blockType = node._type;\n    var serializer = serializers.types[blockType];\n\n    if (!serializer) {\n      if (options.ignoreUnknownTypes) {\n        // eslint-disable-next-line no-console\n        console.warn(\"Unknown block type \\\"\".concat(blockType, \"\\\", please specify a serializer for it in the `serializers.types` prop\"));\n        return h(serializers.unknownType, {\n          node: node,\n          options: options,\n          isInline: isInline\n        }, children);\n      }\n\n      throw new Error(\"Unknown block type \\\"\".concat(blockType, \"\\\", please specify a serializer for it in the `serializers.types` prop\"));\n    }\n\n    return h(serializer, {\n      node: node,\n      options: options,\n      isInline: isInline\n    }, children);\n  } // Low-level span serializer\n\n\n  function SpanSerializer(props) {\n    var _props$node = props.node,\n        mark = _props$node.mark,\n        children = _props$node.children;\n    var isPlain = typeof mark === 'string';\n    var markType = isPlain ? mark : mark._type;\n    var serializer = props.serializers.marks[markType];\n\n    if (!serializer) {\n      // eslint-disable-next-line no-console\n      console.warn(\"Unknown mark type \\\"\".concat(markType, \"\\\", please specify a serializer for it in the `serializers.marks` prop\"));\n      return h(props.serializers.unknownMark, null, children);\n    }\n\n    return h(serializer, props.node, children);\n  } // Low-level list serializer\n\n\n  function ListSerializer(props) {\n    var tag = props.type === 'bullet' ? 'ul' : 'ol';\n    return h(tag, null, props.children);\n  } // Low-level list item serializer\n\n\n  function ListItemSerializer(props) {\n    var children = !props.node.style || props.node.style === 'normal' ? // Don't wrap plain text in paragraphs inside of a list item\n    props.children : // But wrap any other style in whatever the block serializer says to use\n    h(props.serializers.types.block, props, props.children);\n    return h('li', null, children);\n  } // Unknown type default serializer\n\n\n  function DefaultUnknownTypeSerializer(props) {\n    return h('div', {\n      style: {\n        display: 'none'\n      }\n    }, \"Unknown block type \\\"\".concat(props.node._type, \"\\\", please specify a serializer for it in the `serializers.types` prop\"));\n  } // Renderer of an actual block of type `block`. Confusing, we know.\n\n\n  function BlockTypeSerializer(props) {\n    var style = props.node.style || 'normal';\n\n    if (/^h\\d/.test(style)) {\n      return h(style, null, props.children);\n    }\n\n    return style === 'blockquote' ? h('blockquote', null, props.children) : h('p', null, props.children);\n  } // Serializers for things that can be directly attributed to a tag without any props\n  // We use partial application to do this, passing the tag name as the first argument\n\n\n  function RawMarkSerializer(tag, props) {\n    return h(tag, null, props.children);\n  }\n\n  function UnderlineSerializer(props) {\n    var style = serializeOptions.useDashedStyles ? {\n      'text-decoration': 'underline'\n    } : {\n      textDecoration: 'underline'\n    };\n    return h('span', {\n      style: style\n    }, props.children);\n  }\n\n  function StrikeThroughSerializer(props) {\n    return h('del', null, props.children);\n  }\n\n  function LinkSerializer(props) {\n    return h('a', {\n      href: props.mark.href\n    }, props.children);\n  }\n\n  function ImageSerializer(props) {\n    if (!props.node.asset) {\n      return null;\n    }\n\n    var img = h('img', {\n      src: getImageUrl(props)\n    });\n    return props.isInline ? img : h('figure', null, img);\n  } // Serializer that recursively calls itself, producing a hyperscript tree of spans\n\n\n  function serializeSpan(span, serializers, index, options) {\n    if (span === '\\n' && serializers.hardBreak) {\n      return h(serializers.hardBreak, {\n        key: \"hb-\".concat(index)\n      });\n    }\n\n    if (typeof span === 'string') {\n      return serializers.text ? h(serializers.text, {\n        key: \"text-\".concat(index)\n      }, span) : span;\n    }\n\n    var children;\n\n    if (span.children) {\n      children = {\n        children: span.children.map(function (child, i) {\n          return options.serializeNode(child, i, span.children, true);\n        })\n      };\n    }\n\n    var serializedNode = objectAssign({}, span, children);\n    return h(serializers.span, {\n      key: span._key || \"span-\".concat(index),\n      node: serializedNode,\n      serializers: serializers\n    });\n  }\n\n  var HardBreakSerializer = function HardBreakSerializer() {\n    return h('br');\n  };\n\n  var defaultMarkSerializers = {\n    strong: RawMarkSerializer.bind(null, 'strong'),\n    em: RawMarkSerializer.bind(null, 'em'),\n    code: RawMarkSerializer.bind(null, 'code'),\n    underline: UnderlineSerializer,\n    'strike-through': StrikeThroughSerializer,\n    link: LinkSerializer\n  };\n  var defaultSerializers = {\n    // Common overrides\n    types: {\n      block: BlockTypeSerializer,\n      image: ImageSerializer\n    },\n    marks: defaultMarkSerializers,\n    // Less common overrides\n    list: ListSerializer,\n    listItem: ListItemSerializer,\n    block: BlockSerializer,\n    span: SpanSerializer,\n    hardBreak: HardBreakSerializer,\n    unknownType: DefaultUnknownTypeSerializer,\n    unknownMark: 'span',\n    // Container element\n    container: 'div',\n    // Allow overriding text renderer, but leave undefined to just use plain strings by default\n    text: undefined,\n    // Empty nodes (React uses null, hyperscript with empty strings)\n    empty: ''\n  };\n  return {\n    defaultSerializers: defaultSerializers,\n    serializeSpan: serializeSpan\n  };\n};","map":{"version":3,"mappings":"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","names":["objectAssign","require","getImageUrl","module","exports","h","serializerOpts","serializeOptions","useDashedStyles","BlockSerializer","props","node","serializers","options","isInline","children","blockType","_type","serializer","types","ignoreUnknownTypes","console","warn","unknownType","Error","SpanSerializer","mark","isPlain","markType","marks","unknownMark","ListSerializer","tag","type","ListItemSerializer","style","block","DefaultUnknownTypeSerializer","display","BlockTypeSerializer","test","RawMarkSerializer","UnderlineSerializer","textDecoration","StrikeThroughSerializer","LinkSerializer","href","ImageSerializer","asset","img","src","serializeSpan","span","index","hardBreak","key","text","map","child","i","serializeNode","serializedNode","_key","HardBreakSerializer","defaultMarkSerializers","strong","bind","em","code","underline","link","defaultSerializers","image","list","listItem","container","undefined","empty"],"sources":["/home/sony/Data/FE/company-profile/node_modules/@sanity/block-content-to-hyperscript/src/serializers.js"],"sourcesContent":["const objectAssign = require('object-assign')\nconst getImageUrl = require('./getImageUrl')\n\nmodule.exports = (h, serializerOpts) => {\n  const serializeOptions = serializerOpts || {useDashedStyles: false}\n\n  // Low-level block serializer\n  function BlockSerializer(props) {\n    const {node, serializers, options, isInline, children} = props\n    const blockType = node._type\n    const serializer = serializers.types[blockType]\n    if (!serializer) {\n      if (options.ignoreUnknownTypes) {\n        // eslint-disable-next-line no-console\n        console.warn(\n          `Unknown block type \"${blockType}\", please specify a serializer for it in the \\`serializers.types\\` prop`\n        )\n        return h(serializers.unknownType, {node, options, isInline}, children)\n      }\n      throw new Error(\n        `Unknown block type \"${blockType}\", please specify a serializer for it in the \\`serializers.types\\` prop`\n      )\n    }\n\n    return h(serializer, {node, options, isInline}, children)\n  }\n\n  // Low-level span serializer\n  function SpanSerializer(props) {\n    const {mark, children} = props.node\n    const isPlain = typeof mark === 'string'\n    const markType = isPlain ? mark : mark._type\n    const serializer = props.serializers.marks[markType]\n    if (!serializer) {\n      // eslint-disable-next-line no-console\n      console.warn(\n        `Unknown mark type \"${markType}\", please specify a serializer for it in the \\`serializers.marks\\` prop`\n      )\n      return h(props.serializers.unknownMark, null, children)\n    }\n\n    return h(serializer, props.node, children)\n  }\n\n  // Low-level list serializer\n  function ListSerializer(props) {\n    const tag = props.type === 'bullet' ? 'ul' : 'ol'\n    return h(tag, null, props.children)\n  }\n\n  // Low-level list item serializer\n  function ListItemSerializer(props) {\n    const children =\n      !props.node.style || props.node.style === 'normal'\n        ? // Don't wrap plain text in paragraphs inside of a list item\n          props.children\n        : // But wrap any other style in whatever the block serializer says to use\n          h(props.serializers.types.block, props, props.children)\n\n    return h('li', null, children)\n  }\n\n  // Unknown type default serializer\n  function DefaultUnknownTypeSerializer(props) {\n    return h(\n      'div',\n      {style: {display: 'none'}},\n      `Unknown block type \"${\n        props.node._type\n      }\", please specify a serializer for it in the \\`serializers.types\\` prop`\n    )\n  }\n\n  // Renderer of an actual block of type `block`. Confusing, we know.\n  function BlockTypeSerializer(props) {\n    const style = props.node.style || 'normal'\n\n    if (/^h\\d/.test(style)) {\n      return h(style, null, props.children)\n    }\n\n    return style === 'blockquote'\n      ? h('blockquote', null, props.children)\n      : h('p', null, props.children)\n  }\n\n  // Serializers for things that can be directly attributed to a tag without any props\n  // We use partial application to do this, passing the tag name as the first argument\n  function RawMarkSerializer(tag, props) {\n    return h(tag, null, props.children)\n  }\n\n  function UnderlineSerializer(props) {\n    const style = serializeOptions.useDashedStyles\n      ? {'text-decoration': 'underline'}\n      : {textDecoration: 'underline'}\n\n    return h('span', {style}, props.children)\n  }\n\n  function StrikeThroughSerializer(props) {\n    return h('del', null, props.children)\n  }\n\n  function LinkSerializer(props) {\n    return h('a', {href: props.mark.href}, props.children)\n  }\n\n  function ImageSerializer(props) {\n    if (!props.node.asset) {\n      return null\n    }\n\n    const img = h('img', {src: getImageUrl(props)})\n    return props.isInline ? img : h('figure', null, img)\n  }\n\n  // Serializer that recursively calls itself, producing a hyperscript tree of spans\n  function serializeSpan(span, serializers, index, options) {\n    if (span === '\\n' && serializers.hardBreak) {\n      return h(serializers.hardBreak, {key: `hb-${index}`})\n    }\n\n    if (typeof span === 'string') {\n      return serializers.text ? h(serializers.text, {key: `text-${index}`}, span) : span\n    }\n\n    let children\n    if (span.children) {\n      children = {\n        children: span.children.map((child, i) =>\n          options.serializeNode(child, i, span.children, true)\n        )\n      }\n    }\n\n    const serializedNode = objectAssign({}, span, children)\n\n    return h(serializers.span, {\n      key: span._key || `span-${index}`,\n      node: serializedNode,\n      serializers\n    })\n  }\n\n  const HardBreakSerializer = () => h('br')\n  const defaultMarkSerializers = {\n    strong: RawMarkSerializer.bind(null, 'strong'),\n    em: RawMarkSerializer.bind(null, 'em'),\n    code: RawMarkSerializer.bind(null, 'code'),\n    underline: UnderlineSerializer,\n    'strike-through': StrikeThroughSerializer,\n    link: LinkSerializer\n  }\n\n  const defaultSerializers = {\n    // Common overrides\n    types: {\n      block: BlockTypeSerializer,\n      image: ImageSerializer\n    },\n    marks: defaultMarkSerializers,\n\n    // Less common overrides\n    list: ListSerializer,\n    listItem: ListItemSerializer,\n\n    block: BlockSerializer,\n    span: SpanSerializer,\n    hardBreak: HardBreakSerializer,\n\n    unknownType: DefaultUnknownTypeSerializer,\n    unknownMark: 'span',\n\n    // Container element\n    container: 'div',\n\n    // Allow overriding text renderer, but leave undefined to just use plain strings by default\n    text: undefined,\n\n    // Empty nodes (React uses null, hyperscript with empty strings)\n    empty: ''\n  }\n\n  return {\n    defaultSerializers,\n    serializeSpan\n  }\n}\n"]},"metadata":{},"sourceType":"script"}