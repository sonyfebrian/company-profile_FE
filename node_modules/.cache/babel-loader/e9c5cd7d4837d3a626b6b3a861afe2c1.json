{"ast":null,"code":"'use strict';\n\nvar React = require('react');\n\nvar PropTypes = require('prop-types');\n\nvar internals = require('@sanity/block-content-to-hyperscript/internals');\n\nvar _require = require('./targets/dom'),\n    serializers = _require.serializers,\n    serializeSpan = _require.serializeSpan,\n    renderProps = _require.renderProps;\n\nvar getImageUrl = internals.getImageUrl,\n    blocksToNodes = internals.blocksToNodes,\n    mergeSerializers = internals.mergeSerializers;\nvar renderNode = React.createElement;\n\nvar SanityBlockContent = function SanityBlockContent(props) {\n  var customSerializers = mergeSerializers(SanityBlockContent.defaultSerializers, props.serializers);\n  var blockProps = Object.assign({}, renderProps, props, {\n    serializers: customSerializers,\n    blocks: props.blocks || []\n  });\n  return blocksToNodes(renderNode, blockProps, serializers, serializeSpan);\n}; // Expose default serializers to the user\n\n\nSanityBlockContent.defaultSerializers = serializers; // Expose logic for building image URLs from an image reference/node\n\nSanityBlockContent.getImageUrl = getImageUrl;\nSanityBlockContent.propTypes = {\n  className: PropTypes.string,\n  renderContainerOnSingleChild: PropTypes.bool,\n  ignoreUnknownTypes: PropTypes.bool,\n  // When rendering images, we need project id and dataset, unless images are materialized\n  projectId: PropTypes.string,\n  dataset: PropTypes.string,\n  imageOptions: PropTypes.object,\n  serializers: PropTypes.shape({\n    // Common overrides\n    types: PropTypes.object,\n    marks: PropTypes.object,\n    // Less common overrides\n    list: PropTypes.func,\n    listItem: PropTypes.func,\n    // Low-level serializers\n    block: PropTypes.func,\n    span: PropTypes.func\n  }),\n  blocks: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.shape({\n    _type: PropTypes.string.isRequired\n  })), PropTypes.shape({\n    _type: PropTypes.string.isRequired\n  })]).isRequired\n};\nSanityBlockContent.defaultProps = {\n  ignoreUnknownTypes: true,\n  renderContainerOnSingleChild: false,\n  serializers: {},\n  imageOptions: {}\n};\nmodule.exports = SanityBlockContent;","map":{"version":3,"mappings":";;AAAA,IAAMA,QAAQC,QAAQ,OAARA,CAAd;;AACA,IAAMC,YAAYD,QAAQ,YAARA,CAAlB;;AACA,IAAME,YAAYF,QAAQ,gDAARA,CAAlB;;eACkDA,QAAQ,eAARA;IAA3CG,W,YAAAA;IAAaC,a,YAAAA;IAAeC,W,YAAAA;;IAE5BC,W,GAAgDJ,S,CAAhDI;IAAaC,a,GAAmCL,S,CAAnCK;IAAeC,gB,GAAoBN,S,CAApBM;AACnC,IAAMC,aAAaV,MAAMW,aAAzB;;AAEA,IAAMC,qBAAqB,SAArBA,kBAAqB,CAACC,KAAD,EAAW;EACpC,IAAMC,oBAAoBL,iBACxBG,mBAAmBG,kBADKN,EAExBI,MAAMT,WAFkBK,CAA1B;EAKA,IAAMO,aAAaC,OAAOC,MAAPD,CAAc,EAAdA,EAAkBX,WAAlBW,EAA+BJ,KAA/BI,EAAsC;IACvDb,aAAaU,iBAD0C;IAEvDK,QAAQN,MAAMM,MAANN,IAAgB;EAF+B,CAAtCI,CAAnB;EAKA,OAAOT,cAAcE,UAAdF,EAA0BQ,UAA1BR,EAAsCJ,WAAtCI,EAAmDH,aAAnDG,CAAP;AAXF,E,CAcA;;;AACAI,mBAAmBG,kBAAnBH,GAAwCR,WAAxCQ,C,CAEA;;AACAA,mBAAmBL,WAAnBK,GAAiCL,WAAjCK;AAEAA,mBAAmBQ,SAAnBR,GAA+B;EAC7BS,WAAWnB,UAAUoB,MADQ;EAE7BC,8BAA8BrB,UAAUsB,IAFX;EAG7BC,oBAAoBvB,UAAUsB,IAHD;EAK7B;EACAE,WAAWxB,UAAUoB,MANQ;EAO7BK,SAASzB,UAAUoB,MAPU;EAQ7BM,cAAc1B,UAAU2B,MARK;EAU7BzB,aAAaF,UAAU4B,KAAV5B,CAAgB;IAC3B;IACA6B,OAAO7B,UAAU2B,MAFU;IAG3BG,OAAO9B,UAAU2B,MAHU;IAK3B;IACAI,MAAM/B,UAAUgC,IANW;IAO3BC,UAAUjC,UAAUgC,IAPO;IAS3B;IACAE,OAAOlC,UAAUgC,IAVU;IAW3BG,MAAMnC,UAAUgC;EAXW,CAAhBhC,CAVgB;EAwB7BiB,QAAQjB,UAAUoC,SAAVpC,CAAoB,CAC1BA,UAAUqC,OAAVrC,CACEA,UAAU4B,KAAV5B,CAAgB;IACdsC,OAAOtC,UAAUoB,MAAVpB,CAAiBuC;EADV,CAAhBvC,CADFA,CAD0B,EAM1BA,UAAU4B,KAAV5B,CAAgB;IACdsC,OAAOtC,UAAUoB,MAAVpB,CAAiBuC;EADV,CAAhBvC,CAN0B,CAApBA,EASLuC;AAjC0B,CAA/B7B;AAoCAA,mBAAmB8B,YAAnB9B,GAAkC;EAChCa,oBAAoB,IADY;EAEhCF,8BAA8B,KAFE;EAGhCnB,aAAa,EAHmB;EAIhCwB,cAAc;AAJkB,CAAlChB;AAOA+B,OAAOC,OAAPD,GAAiB/B,kBAAjB+B","names":["React","require","PropTypes","internals","serializers","serializeSpan","renderProps","getImageUrl","blocksToNodes","mergeSerializers","renderNode","createElement","SanityBlockContent","props","customSerializers","defaultSerializers","blockProps","Object","assign","blocks","propTypes","className","string","renderContainerOnSingleChild","bool","ignoreUnknownTypes","projectId","dataset","imageOptions","object","shape","types","marks","list","func","listItem","block","span","oneOfType","arrayOf","_type","isRequired","defaultProps","module","exports"],"sources":["/home/sony/Data/FE/company-profile/node_modules/@sanity/block-content-to-react/src/BlockContent.js"],"sourcesContent":["const React = require('react')\nconst PropTypes = require('prop-types')\nconst internals = require('@sanity/block-content-to-hyperscript/internals')\nconst {serializers, serializeSpan, renderProps} = require('./targets/dom')\n\nconst {getImageUrl, blocksToNodes, mergeSerializers} = internals\nconst renderNode = React.createElement\n\nconst SanityBlockContent = (props) => {\n  const customSerializers = mergeSerializers(\n    SanityBlockContent.defaultSerializers,\n    props.serializers\n  )\n\n  const blockProps = Object.assign({}, renderProps, props, {\n    serializers: customSerializers,\n    blocks: props.blocks || [],\n  })\n\n  return blocksToNodes(renderNode, blockProps, serializers, serializeSpan)\n}\n\n// Expose default serializers to the user\nSanityBlockContent.defaultSerializers = serializers\n\n// Expose logic for building image URLs from an image reference/node\nSanityBlockContent.getImageUrl = getImageUrl\n\nSanityBlockContent.propTypes = {\n  className: PropTypes.string,\n  renderContainerOnSingleChild: PropTypes.bool,\n  ignoreUnknownTypes: PropTypes.bool,\n\n  // When rendering images, we need project id and dataset, unless images are materialized\n  projectId: PropTypes.string,\n  dataset: PropTypes.string,\n  imageOptions: PropTypes.object,\n\n  serializers: PropTypes.shape({\n    // Common overrides\n    types: PropTypes.object,\n    marks: PropTypes.object,\n\n    // Less common overrides\n    list: PropTypes.func,\n    listItem: PropTypes.func,\n\n    // Low-level serializers\n    block: PropTypes.func,\n    span: PropTypes.func,\n  }),\n\n  blocks: PropTypes.oneOfType([\n    PropTypes.arrayOf(\n      PropTypes.shape({\n        _type: PropTypes.string.isRequired,\n      })\n    ),\n    PropTypes.shape({\n      _type: PropTypes.string.isRequired,\n    }),\n  ]).isRequired,\n}\n\nSanityBlockContent.defaultProps = {\n  ignoreUnknownTypes: true,\n  renderContainerOnSingleChild: false,\n  serializers: {},\n  imageOptions: {},\n}\n\nmodule.exports = SanityBlockContent\n"]},"metadata":{},"sourceType":"script"}