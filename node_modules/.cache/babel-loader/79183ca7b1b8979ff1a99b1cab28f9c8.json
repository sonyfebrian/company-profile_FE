{"ast":null,"code":"\"use strict\";\n\nvar generateHelpUrl = require('@sanity/generate-help-url');\n\nvar urlBuilder = require('@sanity/image-url');\n\nvar objectAssign = require('object-assign');\n\nvar enc = encodeURIComponent;\nvar materializeError = \"You must either:\\n  - Pass `projectId` and `dataset` to the block renderer\\n  - Materialize images to include the `url` field.\\n\\nFor more information, see \".concat(generateHelpUrl('block-content-image-materializing'));\n\nvar getQueryString = function getQueryString(options) {\n  var query = options.imageOptions;\n  var keys = Object.keys(query);\n\n  if (!keys.length) {\n    return '';\n  }\n\n  var params = keys.map(function (key) {\n    return \"\".concat(enc(key), \"=\").concat(enc(query[key]));\n  });\n  return \"?\".concat(params.join('&'));\n};\n\nvar buildUrl = function buildUrl(props) {\n  var node = props.node,\n      options = props.options;\n  var projectId = options.projectId,\n      dataset = options.dataset;\n  var asset = node.asset;\n\n  if (!asset) {\n    throw new Error('Image does not have required `asset` property');\n  }\n\n  if (asset.url) {\n    return asset.url + getQueryString(options);\n  }\n\n  if (!projectId || !dataset) {\n    throw new Error(materializeError);\n  }\n\n  var ref = asset._ref;\n\n  if (!ref) {\n    throw new Error('Invalid image reference in block, no `_ref` found on `asset`');\n  }\n\n  return urlBuilder(objectAssign({\n    projectId: projectId,\n    dataset: dataset\n  }, options.imageOptions || {})).image(node).toString();\n};\n\nmodule.exports = buildUrl;","map":{"version":3,"mappings":";;AAAA,IAAMA,eAAe,GAAGC,OAAO,CAAC,2BAAD,CAA/B;;AACA,IAAMC,UAAU,GAAGD,OAAO,CAAC,mBAAD,CAA1B;;AACA,IAAME,YAAY,GAAGF,OAAO,CAAC,eAAD,CAA5B;;AAEA,IAAMG,GAAG,GAAGC,kBAAZ;AACA,IAAMC,gBAAgB,yKAIMN,eAAe,CAAC,mCAAD,CAJrB,CAAtB;;AAMA,IAAMO,cAAc,GAAG,SAAjBA,cAAiB,UAAW;EAChC,IAAMC,KAAK,GAAGC,OAAO,CAACC,YAAtB;EACA,IAAMC,IAAI,GAAGC,MAAM,CAACD,IAAPC,CAAYJ,KAAZI,CAAb;;EACA,IAAI,CAACD,IAAI,CAACE,MAAV,EAAkB;IAChB,OAAO,EAAP;EACD;;EAED,IAAMC,MAAM,GAAGH,IAAI,CAACI,GAALJ,CAAS,eAAG;IAAA,iBAAOP,GAAG,CAACY,GAAD,CAAV,cAAmBZ,GAAG,CAACI,KAAK,CAACQ,GAAD,CAAN,CAAtB;EAAZ,EAAf;EACA,kBAAWF,MAAM,CAACG,IAAPH,CAAY,GAAZA,CAAX;AARF;;AAWA,IAAMI,QAAQ,GAAG,SAAXA,QAAW,QAAS;EAAA,IACjBC,IADiB,GACAC,KADA,CACjBD,IADiB;EAAA,IACXV,OADW,GACAW,KADA,CACXX,OADW;EAAA,IAEjBY,SAFiB,GAEKZ,OAFL,CAEjBY,SAFiB;EAAA,IAENC,OAFM,GAEKb,OAFL,CAENa,OAFM;EAGxB,IAAMC,KAAK,GAAGJ,IAAI,CAACI,KAAnB;;EAEA,IAAI,CAACA,KAAL,EAAY;IACV,MAAM,IAAIC,KAAJ,CAAU,+CAAV,CAAN;EACD;;EAED,IAAID,KAAK,CAACE,GAAV,EAAe;IACb,OAAOF,KAAK,CAACE,GAANF,GAAYhB,cAAc,CAACE,OAAD,CAAjC;EACD;;EAED,IAAI,CAACY,SAAD,IAAc,CAACC,OAAnB,EAA4B;IAC1B,MAAM,IAAIE,KAAJ,CAAUlB,gBAAV,CAAN;EACD;;EAED,IAAMoB,GAAG,GAAGH,KAAK,CAACI,IAAlB;;EACA,IAAI,CAACD,GAAL,EAAU;IACR,MAAM,IAAIF,KAAJ,CAAU,8DAAV,CAAN;EACD;;EAED,OAAOtB,UAAU,CAACC,YAAY,CAAC;IAACkB,SAAS,EAATA,SAAD;IAAYC,OAAO,EAAPA;EAAZ,CAAD,EAAuBb,OAAO,CAACC,YAARD,IAAwB,EAA/C,CAAb,CAAVP,CACJ0B,KADI1B,CACEiB,IADFjB,EAEJ2B,QAFI3B,EAAP;AAtBF;;AA2BA4B,MAAM,CAACC,OAAPD,GAAiBZ,QAAjBY","names":["generateHelpUrl","require","urlBuilder","objectAssign","enc","encodeURIComponent","materializeError","getQueryString","query","options","imageOptions","keys","Object","length","params","map","key","join","buildUrl","node","props","projectId","dataset","asset","Error","url","ref","_ref","image","toString","module","exports"],"sources":["/home/sony/Data/FE/company-profile/node_modules/@sanity/block-content-to-hyperscript/src/getImageUrl.js"],"sourcesContent":["const generateHelpUrl = require('@sanity/generate-help-url')\nconst urlBuilder = require('@sanity/image-url')\nconst objectAssign = require('object-assign')\n\nconst enc = encodeURIComponent\nconst materializeError = `You must either:\n  - Pass \\`projectId\\` and \\`dataset\\` to the block renderer\n  - Materialize images to include the \\`url\\` field.\n\nFor more information, see ${generateHelpUrl('block-content-image-materializing')}`\n\nconst getQueryString = options => {\n  const query = options.imageOptions\n  const keys = Object.keys(query)\n  if (!keys.length) {\n    return ''\n  }\n\n  const params = keys.map(key => `${enc(key)}=${enc(query[key])}`)\n  return `?${params.join('&')}`\n}\n\nconst buildUrl = props => {\n  const {node, options} = props\n  const {projectId, dataset} = options\n  const asset = node.asset\n\n  if (!asset) {\n    throw new Error('Image does not have required `asset` property')\n  }\n\n  if (asset.url) {\n    return asset.url + getQueryString(options)\n  }\n\n  if (!projectId || !dataset) {\n    throw new Error(materializeError)\n  }\n\n  const ref = asset._ref\n  if (!ref) {\n    throw new Error('Invalid image reference in block, no `_ref` found on `asset`')\n  }\n\n  return urlBuilder(objectAssign({projectId, dataset}, options.imageOptions || {}))\n    .image(node)\n    .toString()\n}\n\nmodule.exports = buildUrl\n"]},"metadata":{},"sourceType":"script"}