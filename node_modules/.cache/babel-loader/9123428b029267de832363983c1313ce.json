{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar isFunction_1 = require(\"./util/isFunction\");\n\nvar Observer_1 = require(\"./Observer\");\n\nvar Subscription_1 = require(\"./Subscription\");\n\nvar rxSubscriber_1 = require(\"../internal/symbol/rxSubscriber\");\n\nvar config_1 = require(\"./config\");\n\nvar hostReportError_1 = require(\"./util/hostReportError\");\n\nvar Subscriber = function (_super) {\n  __extends(Subscriber, _super);\n\n  function Subscriber(destinationOrNext, error, complete) {\n    var _this = _super.call(this) || this;\n\n    _this.syncErrorValue = null;\n    _this.syncErrorThrown = false;\n    _this.syncErrorThrowable = false;\n    _this.isStopped = false;\n\n    switch (arguments.length) {\n      case 0:\n        _this.destination = Observer_1.empty;\n        break;\n\n      case 1:\n        if (!destinationOrNext) {\n          _this.destination = Observer_1.empty;\n          break;\n        }\n\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            _this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            _this.destination = destinationOrNext;\n            destinationOrNext.add(_this);\n          } else {\n            _this.syncErrorThrowable = true;\n            _this.destination = new SafeSubscriber(_this, destinationOrNext);\n          }\n\n          break;\n        }\n\n      default:\n        _this.syncErrorThrowable = true;\n        _this.destination = new SafeSubscriber(_this, destinationOrNext, error, complete);\n        break;\n    }\n\n    return _this;\n  }\n\n  Subscriber.prototype[rxSubscriber_1.rxSubscriber] = function () {\n    return this;\n  };\n\n  Subscriber.create = function (next, error, complete) {\n    var subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  };\n\n  Subscriber.prototype.next = function (value) {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  };\n\n  Subscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      this.isStopped = true;\n\n      this._error(err);\n    }\n  };\n\n  Subscriber.prototype.complete = function () {\n    if (!this.isStopped) {\n      this.isStopped = true;\n\n      this._complete();\n    }\n  };\n\n  Subscriber.prototype.unsubscribe = function () {\n    if (this.closed) {\n      return;\n    }\n\n    this.isStopped = true;\n\n    _super.prototype.unsubscribe.call(this);\n  };\n\n  Subscriber.prototype._next = function (value) {\n    this.destination.next(value);\n  };\n\n  Subscriber.prototype._error = function (err) {\n    this.destination.error(err);\n    this.unsubscribe();\n  };\n\n  Subscriber.prototype._complete = function () {\n    this.destination.complete();\n    this.unsubscribe();\n  };\n\n  Subscriber.prototype._unsubscribeAndRecycle = function () {\n    var _parentOrParents = this._parentOrParents;\n    this._parentOrParents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parentOrParents = _parentOrParents;\n    return this;\n  };\n\n  return Subscriber;\n}(Subscription_1.Subscription);\n\nexports.Subscriber = Subscriber;\n\nvar SafeSubscriber = function (_super) {\n  __extends(SafeSubscriber, _super);\n\n  function SafeSubscriber(_parentSubscriber, observerOrNext, error, complete) {\n    var _this = _super.call(this) || this;\n\n    _this._parentSubscriber = _parentSubscriber;\n    var next;\n    var context = _this;\n\n    if (isFunction_1.isFunction(observerOrNext)) {\n      next = observerOrNext;\n    } else if (observerOrNext) {\n      next = observerOrNext.next;\n      error = observerOrNext.error;\n      complete = observerOrNext.complete;\n\n      if (observerOrNext !== Observer_1.empty) {\n        context = Object.create(observerOrNext);\n\n        if (isFunction_1.isFunction(context.unsubscribe)) {\n          _this.add(context.unsubscribe.bind(context));\n        }\n\n        context.unsubscribe = _this.unsubscribe.bind(_this);\n      }\n    }\n\n    _this._context = context;\n    _this._next = next;\n    _this._error = error;\n    _this._complete = complete;\n    return _this;\n  }\n\n  SafeSubscriber.prototype.next = function (value) {\n    if (!this.isStopped && this._next) {\n      var _parentSubscriber = this._parentSubscriber;\n\n      if (!config_1.config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  };\n\n  SafeSubscriber.prototype.error = function (err) {\n    if (!this.isStopped) {\n      var _parentSubscriber = this._parentSubscriber;\n      var useDeprecatedSynchronousErrorHandling = config_1.config.useDeprecatedSynchronousErrorHandling;\n\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n\n        hostReportError_1.hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError_1.hostReportError(err);\n        }\n\n        this.unsubscribe();\n      }\n    }\n  };\n\n  SafeSubscriber.prototype.complete = function () {\n    var _this = this;\n\n    if (!this.isStopped) {\n      var _parentSubscriber = this._parentSubscriber;\n\n      if (this._complete) {\n        var wrappedComplete = function () {\n          return _this._complete.call(_this._context);\n        };\n\n        if (!config_1.config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  };\n\n  SafeSubscriber.prototype.__tryOrUnsub = function (fn, value) {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n\n      if (config_1.config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError_1.hostReportError(err);\n      }\n    }\n  };\n\n  SafeSubscriber.prototype.__tryOrSetError = function (parent, fn, value) {\n    if (!config_1.config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config_1.config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError_1.hostReportError(err);\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  SafeSubscriber.prototype._unsubscribe = function () {\n    var _parentSubscriber = this._parentSubscriber;\n    this._context = null;\n    this._parentSubscriber = null;\n\n    _parentSubscriber.unsubscribe();\n  };\n\n  return SafeSubscriber;\n}(Subscriber);\n\nexports.SafeSubscriber = SafeSubscriber;","map":{"version":3,"mappings":"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","names":["__extends","destinationOrNext","error","complete","_super","_this","arguments","length","destination","Observer_1","Subscriber","syncErrorThrowable","add","SafeSubscriber","rxSubscriber_1","next","subscriber","value","isStopped","_next","err","_error","_complete","closed","unsubscribe","call","_parentOrParents","Subscription_1","exports","_parentSubscriber","observerOrNext","context","isFunction_1","Object","create","bind","_context","config_1","useDeprecatedSynchronousErrorHandling","__tryOrUnsub","__tryOrSetError","hostReportError_1","syncErrorValue","syncErrorThrown","wrappedComplete","fn","parent","Error"],"sources":["/home/sony/Data/FE/company-profile/node_modules/rxjs/src/internal/Subscriber.ts"],"sourcesContent":["import { isFunction } from './util/isFunction';\nimport { empty as emptyObserver } from './Observer';\nimport { Observer, PartialObserver, TeardownLogic } from './types';\nimport { Subscription } from './Subscription';\nimport { rxSubscriber as rxSubscriberSymbol } from '../internal/symbol/rxSubscriber';\nimport { config } from './config';\nimport { hostReportError } from './util/hostReportError';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  /** @internal */ syncErrorValue: any = null;\n  /** @internal */ syncErrorThrown: boolean = false;\n  /** @internal */ syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any> | Subscriber<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.syncErrorThrowable = destinationOrNext.syncErrorThrowable;\n            this.destination = destinationOrNext;\n            destinationOrNext.add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached `Error`. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  /** @deprecated This is an internal implementation detail, do not use. */\n  _unsubscribeAndRecycle(): Subscriber<T> {\n    const {  _parentOrParents } = this;\n    this._parentOrParents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parentOrParents = _parentOrParents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nexport class SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      const { useDeprecatedSynchronousErrorHandling } = config;\n      if (this._error) {\n        if (!useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        if (useDeprecatedSynchronousErrorHandling) {\n          throw err;\n        }\n        hostReportError(err);\n      } else {\n        if (useDeprecatedSynchronousErrorHandling) {\n          _parentSubscriber.syncErrorValue = err;\n          _parentSubscriber.syncErrorThrown = true;\n        } else {\n          hostReportError(err);\n        }\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!config.useDeprecatedSynchronousErrorHandling || !_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        throw err;\n      } else {\n        hostReportError(err);\n      }\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    if (!config.useDeprecatedSynchronousErrorHandling) {\n      throw new Error('bad call');\n    }\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        parent.syncErrorValue = err;\n        parent.syncErrorThrown = true;\n        return true;\n      } else {\n        hostReportError(err);\n        return true;\n      }\n    }\n    return false;\n  }\n\n  /** @internal This is an internal implementation detail, do not use. */\n  _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n"]},"metadata":{},"sourceType":"script"}